#!python

"""Matches barcodes to subassembled variants, makes count files and plots.

Written by Danny Lawrence and Jesse Bloom."""

import time
import os
import dms_tools.parsearguments
import dms_tools.file_io



def get_variants(subassembled_variants_file):
    """Reads subassembled_variants file produced by *dms_subassemble* and returns barcodes with associated mutations.

    `subassembled_variants_file` is a string that gives the name of a file containing the barcode sequence,
    gene sequence and mutations associated with each subassembled variant in the format output by *dms_subassemble*.

    `bc_dict` is a dictionary containing each barcode sequence as a key and the mutations associated
    with that barcode as values. It also contains a key, "wt_seq" with the wildtype nucleotide sequence
    as its value. 

    `bc_len` is an interger indicating the length of the identifying barcode sequence to be used in *parse_barcodes*. 
    """

    infile = open(subassembled_variants_file, 'r')
    bc_dict = {}
    
    print("Reading barcodes and associated mutations.")
    for line in infile:
        cats = line.strip().split(" ")
        barcode = cats[0]
        bc_len = len(barcode)
        seq = cats[1]
        mut_str = cats[2]
        muts = mut_str.strip().split(',')
        mut_tup = ()
        for mut in muts:
            if mut == "no_mutations":
                mut_tup = mut_tup + (mut, )
                bc_dict['wt_seq'] = seq
            else:
                wt = mut[:3]
                new = mut[-3:]
                pos = int(mut[3:len(mut)-3])            
                mut_string = (wt+str('%03d' % pos)+new)
                mut_tup = mut_tup + (mut_string, )
        bc_dict[barcode] = mut_tup
    
    return (bc_dict, bc_len)



def reverse_comp(seq, quals):
    """Returns the reverse complement of a DNA sequence and the respective Illumina quality scores

    `seq` is a string-formatted DNA sequence using the alphabet (A, C, G, T, N). 
    `quals` is a string containing the respecitve quality score for each base in the DNA sequence.

    `rc_seq` is the reverse-complemented DNA sequence.
    `rc_quals` is quality scores for the reverse-complemented DNA sequence. 
    """

    assert len(seq) == len(quals), "Sequence length does not match quality scores length."
    rc_dict = {'A':'T', 'T':'A', 'G':'C', 'C':'G', 'N':'N'}
    rc_seq = ""
    rc_quals = ""
    
    rc_list = list(reversed(range(len(seq))))
    for i in rc_list:
        nuc = seq[i].upper()
        rc_seq += rc_dict[nuc]
        rc_quals += quals[i]
    return(rc_seq, rc_quals)


def parse_barcodes(read1_file, read2_file, min_quality, bc_len, out_prefix):
    """Reads Illumina fastq files and returns a list of barcodes that pass a quality threshold.

    `read1_file` and `read2_file` are strings indicating the file names of gzipped fastq files
    produced by Illumina sequencing. Note that both files must contain the same number of reads, 
    and pairs of reads must be in the same order in each file. 

    `min_quality` is an interger (0-50) indicating the Phred quality score below which a base call will
    be ignored. 

    `bc_len` is the length of the barcode sequence. This is automatically determined by *get_variants* above
    """
    
    gzipped = True
    bc_dict = {}
    total_seqs = 0
    bc_count = 0
    bc_list = []
    barcodes_file = 'barcodes_'+out_prefix+'.fastq'
    if os.path.isfile(barcodes_file):
        os.remove(barcodes_file)
    barcodes = open(barcodes_file, 'w')
    

    read1 = read1_file
    read2 = read2_file
    print("\nWriting barcode sequences to: %s" % (barcodes_file))
    for read_tup in dms_tools.file_io.IteratePairedFASTQ(read1, read2, gzipped, applyfilter=True):
        if read_tup:
            (name, r1, r2, q1, q2) = read_tup
            total_seqs += 1
            (new_r2_seq, new_r2_qual) = reverse_comp(r2, q2)
            bc1 = r1[:bc_len]
            bcq1 = q1[:bc_len]
            bc2 = new_r2_seq[:bc_len]
            bcq2 = new_r2_qual[:bc_len]
            assert len(bc1) == len(bc2), "Read1 barcode not the same length as Read2 barcode."
            bc = ""
            bcq = ""
            for j in range(len(bc1)):
                qual1 = ord(bcq1[j])-33
                qual2 = ord(bcq2[j])-33
                if bc1[j] == bc2[j] and (qual1 >= min_quality or qual2 >= min_quality):
                    bc += bc1[j]
                    if qual1 >= qual2:
                        bcq += bcq1[j]
                    else:
                        bcq += bcq2[j]
                elif bc2[j] == 'N' and bc1[j] != 'N' and (qual1 >= min_quality):
                    bc += bc1[j]
                    bcq += bcq1[j]
                elif bc1[j] == 'N' and bc2[j] != 'N' and (qual2 >= min_quality):
                    bc += bc2[j]
                    bcq += bcq2[j]
                elif bc1[j] != bc2[j]:
                    if qual1 >= qual2 and (qual1 >= min_quality):
                        bc += bc1[j]
                        bcq += bcq1[j]
                    elif qual2 >= qual1 and (qual2 >= min_quality):
                        bc += bc2[j]
                        bcq += bcq2[j]
                else:
                    break
            if len(bc) == len(bcq) == bc_len:
                barcodes.write('@'+name+'\n'+bc+'\n+\n'+bcq+'\n')
                bc_list.append(bc)
                bc_count += 1
    
    
    return bc_list
    

    print("Among %d total sequences:" % (total_seqs))
    print("%f percent of sequences passed quality standards." % (float(bc_count)/float(total_seqs)))
    print("--------------------------------------------------------")







def write_counts_file(bc_list, bc_dict, out_prefix):
    """Writes deep mutational scanning counts file.

    `bc_list` is a list of post-selection barcode sequences parsed from *parse_barcodes*.
    `bc_dict` is the dictionary linking barcode sequences with associated mutations given by *get_variants* 
    """
    char_type = 'codon' #'codon' or 'AA'

    refseq = bc_dict['wt_seq']
    sites = [i + 1 for i in range(len(refseq) // 3)]
    refseq_chars = dict([(site, refseq[3 * site - 3 : 3 * site]) for site in sites])


    # Create list of all possible codons. 
    nts = ['A', 'C', 'G', 'T']
    codons_list = []
    for nt1 in nts:
        for nt2 in nts:
            for nt3 in nts:
                codons_list.append('%s%s%s' % (nt1, nt2, nt3))

    aa_list = [ 'A', 'C', 'D', 'E', 'F', 'G', 'H', 
                'I', 'K', 'L', 'M', 'N', 'P', 'Q', 
                'R', 'S', 'T', 'V', 'W', 'Y', '*',]


    trans_dict = {
        'AAA':'K', 'AAC':'N', 'AAG':'K', 'AAT':'N',
        'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',
        'AGA':'R', 'AGC':'S', 'AGG':'R', 'AGT':'S',
        'ATA':'I', 'ATC':'I', 'ATG':'M', 'ATT':'I',
        'CAA':'Q', 'CAC':'H', 'CAG':'Q', 'CAT':'H',
        'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',
        'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',
        'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',
        'GAA':'E', 'GAC':'D', 'GAG':'E', 'GAT':'D',
        'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',
        'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',
        'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',
        'TAA':'*', 'TAC':'Y', 'TAG':'*', 'TAT':'Y',
        'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',
        'TGA':'*', 'TGC':'C', 'TGG':'W', 'TGT':'C',
        'TTA':'L', 'TTC':'F', 'TTG':'L', 'TTT':'F',}

        
    outfile_name = 'mut_counts_%s.txt' % (out_prefix)
    if os.path.isfile(outfile_name):
        os.remove(outfile_name)
    outfile = open(outfile_name, 'w')

    notfound_list = []
    bcs_total = 0
    bcs_found = 0
    bcs_notfound = 0
    mut_dict = {}
    for i in range(1, 355):
        if char_type == 'AA':
            mut_dict[str('%03d') % i] = {
            'A':0, 'C':0, 'D':0, 'E':0, 'F':0,
            'G':0, 'H':0, 'I':0, 'K':0, 'L':0,
            'M':0, 'N':0, 'P':0, 'Q':0, 'R':0,
            'S':0, 'T':0, 'V':0, 'W':0, 'Y':0, 
            '*':0, 'WT':trans_dict[refseq_chars[i]]
            }
            codon_list = aa_list

        elif char_type == 'codon':
            mut_dict[str('%03d') % i] = {
            'AAA':0, 'AAC':0, 'AAG':0, 'AAT':0, 'ACA':0, 'ACC':0, 'ACG':0, 'ACT':0,
            'AGA':0, 'AGC':0, 'AGG':0, 'AGT':0, 'ATA':0, 'ATC':0, 'ATG':0, 'ATT':0,
            'CAA':0, 'CAC':0, 'CAG':0, 'CAT':0, 'CCA':0, 'CCC':0, 'CCG':0, 'CCT':0,
            'CGA':0, 'CGC':0, 'CGG':0, 'CGT':0, 'CTA':0, 'CTC':0, 'CTG':0, 'CTT':0,
            'GAA':0, 'GAC':0, 'GAG':0, 'GAT':0, 'GCA':0, 'GCC':0, 'GCG':0, 'GCT':0,
            'GGA':0, 'GGC':0, 'GGG':0, 'GGT':0, 'GTA':0, 'GTC':0, 'GTG':0, 'GTT':0,
            'TAA':0, 'TAC':0, 'TAG':0, 'TAT':0, 'TCA':0, 'TCC':0, 'TCG':0, 'TCT':0,
            'TGA':0, 'TGC':0, 'TGG':0, 'TGT':0, 'TTA':0, 'TTC':0, 'TTG':0, 'TTT':0,
            "WT":refseq_chars[i]
            }
            codon_list = codons_list

    for barcode in bc_list:
        bcs_total += 1
        if barcode in bc_dict:
            bcs_found += 1
            mutations = bc_dict[barcode]
            for mutation in mutations:
                if mutation != 'no_mutations':
                    pos = str(mutation[3:6])
                    new = mutation[-3:]
                    if char_type == 'AA':
                        new_aa = trans_dict[new]
                        mut_dict[pos][new_aa] += 1
                    elif char_type == 'codon':
                        mut_dict[pos][new] += 1


        elif barcode not in bc_dict:
            bcs_notfound += 1
            notfound_list.append(barcode)


    for position in mut_dict:
        muts_at_site = 0
        for mut in mut_dict[position]:
            if mut != "WT":
                muts_at_site += mut_dict[position][mut]
        n_wt = bcs_found - muts_at_site
        wt_codon = mut_dict[position]['WT']
        mut_dict[position][wt_codon] += n_wt

    pos_list = mut_dict.keys()
    pos_list.sort()
    outfile.write('# POSITION WT %s\n' % ' '.join([str(k) for k in codon_list]))
    for aa_pos in pos_list:
        outfile.write(aa_pos+' '+mut_dict[aa_pos]['WT']+' '+'%s\n' % ' '.join([str(mut_dict[aa_pos][j]) for j in codon_list]))
    print('Wrote mutation counts matrix to %s' % outfile_name)
    outfile.close()







def main():

    """Creates a counts file that can be used by *dms_inferprefs* and *dms_inferdiffprefs*.

    `subassembled` is the file name of the subassembled variants produced by *dms_subassemble*. This file ends with "_subassembled_variants.txt"
    `r1files` is the file name of fastq formatted Illumina R1 reads.
    `r2files` is the file name of fastq formatted Illumina R2 reads. Paired R1 and R2 reads must be in the same order in each file.
    `outprefix` is the file name prefix for any output files produced. 
    `min_quality` is an optional variable indicating the minimum quality score below which a basecall will be ignored (Default: 25)

    """
    parser = dms_tools.parsearguments.MatchSubassembledBarcodesParser()
    args = vars(parser.parse_args())
    print(args)

    start_time = time.time()
    localtime = time.asctime()
    print("Start time: %s" % localtime)

    # Get barcodes for subassembled variants and their respective mutations.
    (barcode_dict, barcode_length) = get_variants(args['subassembled'])

    # Get selected barcodes that pass quality filters.
    barcode_list = parse_barcodes(args['r1files'], args['r2files'], args['min_quality'], barcode_length, args['outprefix'])

    # Write counts_file.
    write_counts_file(barcode_list, barcode_dict, args['outprefix'])

    print("Finished counting barcodes.")

    interval = float((time.time() - start_time)/60)
    time_taken = float(interval)
    unit = ''
    if interval > 60:
        if interval > 1440:
            time_taken = interval/1440
            unit = 'days'
        else:
            time_taken = interval/60
            unit = 'hours'
    else: 
        tame_taken = interval
        unit = 'minutes'

    print("\n---------------------------------------- \n  the program took %.2f %s to run \n----------------------------------------\n" % (time_taken, unit))




if __name__ == '__main__':
    main() #run the script
