#!python

"""Makes logo plots of preferences or differential preferences.

Written by Jesse Bloom."""


import sys
import os
import time
import scipy.stats
import dms_tools.utils
import dms_tools.parsearguments
import dms_tools.file_io
import dms_tools.weblogo



def main():
    """Main body of script."""

    # Parse command line arguments
    parser = dms_tools.parsearguments.LogoPlotParser()
    args = vars(parser.parse_args())
    prog = parser.prog

    # print initial information
    versionstring = dms_tools.file_io.Versions() 
    print 'Beginning execution of %s in directory %s\n' % (prog, os.getcwd())
    print versionstring
    print 'Parsed the following arguments:\n%s\n' % '\n'.join(['\t%s = %s' % tup for tup in args.iteritems()])

    # some argument checking
    assert args['nperline'] >= 1, "nperline of %d is not >= 1" % args['nperline']
    assert args['numberevery'] >= 1, "numberevery of %d is not >= 1" % args['numberevery']

    # remove output files if they exist
    if os.path.dirname(args['logoplot']) and not os.path.isdir(os.path.dirname(args['logoplot'])):
        raise ValueError('logoplot specifies non-existent directory as part of name:\n%s' % args['logoplot'])
    print "\nLogo plot will be written to %s" % args['logoplot']
    if os.path.isfile(args['logoplot']):
        os.remove(args['logoplot'])
        print "Removing existing file %s" % args['logoplot']

    # read data
    print "\nReading data from %s" % args['infile']
    (sites, characters, wts, databyfile) = dms_tools.file_io.ReadMultiPrefOrDiffPref([args['infile']], args['excludestop'])
    data = databyfile[args['infile']]
    if 'preferences' == dms_tools.utils.Pref_or_DiffPref(data):
        print "%s specifies preferences" % args['infile']
        datatype = 'prefs'
    elif 'diffprefs' == dms_tools.utils.Pref_or_DiffPref(data):
        print "%s specifies differential preferences" % args['infile']
        datatype = 'diffprefs'
    else:
        raise ValueError("infile %s does not either valid preferences or valid differential preferences" % args['infile'])

    # make logo plot
    print "\nNow making the logo plot in file %s" % args['logoplot']
    dms_tools.weblogo.LogoPlot(sites, datatype, data, args['logoplot'], args['nperline'], numberevery=args['numberevery'], ydatamax=args['diffprefheight'])
    assert os.path.isfile(args['logoplot']), "Failed to create %s" % args['logoplot']

    print '\nSuccessfully completed %s at %s' % (prog, time.asctime())



if __name__ == '__main__':
    main() # run the script
